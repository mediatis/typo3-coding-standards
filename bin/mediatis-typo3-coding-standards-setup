#!/usr/bin/env php
<?php

$supportedTypo3Versions = [11, 12];
$binDirectory = $_composer_bin_dir ?? __DIR__ . '/../../../../bin';
$targetPackageDirectory = realpath($binDirectory . '/../..');
$codingStandardsPackageDirectory = realpath(__DIR__ . '/..');
$requiredFolderPaths = ['Classes', 'Tests'];
$examplePackagePath = 'example-extension';
$typo3Version = $argv[1] ?? null;

class MediatisCodingStandardsSetup
{
    public function __construct(
        protected string $targetPackageDirectory,
        protected string $codingStandardsPackageDirectory,
        protected array $requiredFolderPaths,
        protected string $examplePackageDirectory,
        protected int $typo3Version
    ) {
    }

    protected function updateFolderStructure(string $filePath): void
    {
        if (!str_starts_with($filePath, $this->targetPackageDirectory)) {
            throw new Exception(sprintf('file path "%s" does not seem to be within the package directory.', $filePath));
        }
        $pathParts = explode('/', $filePath);
        array_pop($pathParts);
        $folderPath = implode('/', $pathParts);
        if (!is_dir($folderPath)) {
            mkdir($folderPath, recursive: true);
        }
    }

    protected function getExtensionKeyFromComposerData(array $data): string
    {
        if (!isset($data['extra']['typo3/cms']['extension-key'])) {
            throw new Exception('No extension key found in composer.json');
        }
        return $data['extra']['typo3/cms']['extension-key'];
    }

    protected function updateFileContentsComposerJson(string $sourceContents, string $targetContents, array $config): string
    {
        $sourceData = json_decode($sourceContents, true, 512, JSON_THROW_ON_ERROR);
        $targetData = json_decode($targetContents, true, 512, JSON_THROW_ON_ERROR);

        foreach ($config as $key => $merge) {
            if (!isset($sourceData[$key])) {
                throw new Exception(sprintf('Key "%s" not found in source data!', $key));
            }
            if ($merge && isset($targetData[$key]) && is_array($targetData[$key])) {
                foreach ($sourceData[$key] as $configKey => $configValue) {
                    if (array_key_exists($configKey, $targetData[$key])) {
                        unset($targetData[$key][$configKey]);
                    }
                    $targetData[$key][$configKey] = $configValue;
                }
            } else {
                $targetData[$key] = $sourceData[$key];
            }
        }

        $sourceExtensionKey = $this->getExtensionKeyFromComposerData($sourceData);
        $targetExtensionKey = $this->getExtensionKeyFromComposerData($targetData);
        foreach ($targetData['scripts']['link-extension'] ?? [] as $index => $value) {
            $targetData['scripts']['link-extension'][$index] = str_replace($sourceExtensionKey, $targetExtensionKey, $value);
        }

        return json_encode($targetData, JSON_PRETTY_PRINT | JSON_THROW_ON_ERROR | JSON_UNESCAPED_SLASHES) . PHP_EOL;
    }

    protected function updateFileContents(string $sourceContents, string $targetContents, string $filePath, array $config): string
    {
        switch ($filePath) {
            case 'composer.json':
                return $this->updateFileContentsComposerJson($sourceContents, $targetContents, $config);
            default:
                throw new Exception(sprintf('No information how to process "%s" found!'), $filePath);
        }
    }

    protected function updateFile(string $filePath, ?string $targetFilePath = null, ?array $config = null): void
    {
        $sourcePath = $this->getSourcePath($filePath);
        $targetPath = $this->getTargetPath($targetFilePath ?? $filePath);
        $sourceContents = file_get_contents($sourcePath);
        if ($sourceContents === false) {
            throw new Exception(sprintf('File "%s" not found!', $sourcePath));
        }
        if ($config !== null) {
            $targetContents = file_get_contents($targetPath);
            if ($targetContents === false) {
                throw new Exception(sprintf('File "%s" not found!', $targetPath));
            }
            $targetContents = $this->updateFileContents($sourceContents, $targetContents, $filePath, $config);
        } else {
            $targetContents = $sourceContents;
        }

        $this->updateFolderStructure($targetPath);
        file_put_contents($targetPath, $targetContents);
    }

    protected function getSourcePath(string $filePath): string
    {
        return $this->codingStandardsPackageDirectory . '/' . $this->examplePackageDirectory . '/' . $filePath;
    }

    protected function getTargetPath(string $filePath): string
    {
        return $this->targetPackageDirectory . '/'. $filePath;
    }

    protected function setupCsFixerConfig(): void
    {
        $this->updateFile('.php-cs-fixer.php');
    }

    protected function setupRectorConfig(): void
    {
        $sourceFilePath = match($this->typo3Version) {
            11 => 'rector-typo3-11.php',
            12 => 'rector-typo3-12.php',
        };
        $this->updateFile(
            $sourceFilePath,
            'rector.php'
        );
    }

    protected function setupPhpStanConfig(): void
    {
        $this->updateFile('phpstan.neon');
    }

    protected function setupGithubPipeline(): void
    {
        $this->updateFile('.github/workflows/ci.yml');
    }

    protected function setupComposerJson(): void
    {
        $this->updateFile('composer.json', 'composer.json', [
            'scripts' => true,
            'scripts-descriptions' => true,
        ]);
    }

    protected function setupRequiredFolders(): void
    {
        foreach ($this->requiredFolderPaths as $requiredFolderPath) {
            if (!is_dir($this->getTargetPath($requiredFolderPath))) {
                $this->updateFile($requiredFolderPath . '/.gitkeep');
            }
        }
    }

    public function setup(): void
    {
        $this->setupCsFixerConfig();
        $this->setupRectorConfig();
        $this->setupPhpStanConfig();
        $this->setupGithubPipeline();
        $this->setupComposerJson();
        $this->setupRequiredFolders();
    }
}

print(PHP_EOL);
print('#####################################################' . PHP_EOL);
print('#         MEDIATIS - TYPO3 CODING STANDARDS         #' . PHP_EOL);
print('#####################################################' . PHP_EOL);
print(PHP_EOL);

print('Setting up configuration...');
try {
    if ($typo3Version === null) {
        throw new Exception(sprintf('Please provide a TYPO3 version (%s). Use the lowest one your extension supports.', implode(' or ', $supportedTypo3Versions)));
    } elseif (!is_numeric($typo3Version)) {
        throw new Exception('Provided TYPO3 version does not seem to be numeric. Use the lowest one your extension supports.');
    } elseif (!in_array($typo3Version, $supportedTypo3Versions, false)) {
        throw new Exception(sprintf('Provided TYPO3 version "%s" is not supported. Supported versions: %s', $typo3Version, implode(', ', $supportedTypo3Versions)));
    }
    $codingStandardsSetup = new MediatisCodingStandardsSetup(
        $targetPackageDirectory,
        $codingStandardsPackageDirectory,
        $requiredFolderPaths,
        $examplePackagePath,
        $typo3Version
    );
    $codingStandardsSetup->setup();
    print(' success!' . PHP_EOL);
    print(PHP_EOL);
} catch (Exception $e) {
    print(' failed!' . PHP_EOL);
    print(PHP_EOL);
    print('Reason: ' . $e->getMessage() . PHP_EOL);
    print(PHP_EOL);
}
